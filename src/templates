#ifndef __GSOCKET_TEMPLATE
#define __GSOCKET_TEMPLATE
#include <string_view>
#include <gsocket/src/core/socket_wrapper>
#include <gsocket/socket>
namespace gsocket::templates
{
    template <class gsocketClass> constexpr int connect(gsocketClass *ptr, std::string_view addr,uint16_t port){
        sockaddr_in h{
            h.sin_family = ptr->domain,
            h.sin_port = htons(port)
        };
        inet_pton(ptr->domain, addr.data(), &h.sin_addr);
        return ::connect(ptr->fd, reinterpret_cast<sockaddr*>(&h),sizeof(h));
    }
    template <class gsocketClass> constexpr int send(gsocketClass *ptr, std::string_view data){
        return ::send(ptr->fd, data.data(), data.size(), 0);
    }
    template <class gsocketClass, class A> constexpr int recv(gsocketClass *ptr, A *buff){
        return ::recv(ptr->fd, buff->data(), buff->size(), 0);
    }
    /* Note: this template function does not empty the buffer, what means previous data might
        be displayed if you don't empty it somehow e.g clear() assign("")
        Example: first read -> "gurgui" || second read -> "aaa"  || buff -> aaagui */
    template <class gsocketClass, class A> constexpr int awaitData(gsocketClass *ptr, A *buff, int timeout = -1){
        auto fdp = pollfd{
            .fd{ptr->fd},
            .events{POLLIN}
        };
        auto a = poll(&fdp,1,(timeout == -1 ? -1 : timeout * 1000));
        int n;
        if(a > 0 && (fdp.revents & POLLIN)){
            ioctl(ptr->fd,FIONREAD,&n);
            if(buff->size() < n){
                buff->resize(buff->size()+n);
            }
            return ::recv(ptr->fd, buff->data(), buff->size(),0);
        }
        return -2;
    }
    template <class gsocketClass> constexpr int bind(gsocketClass *ptr, std::string_view h, uint16_t port){
        sockaddr_in addr{
            .sin_family{ptr->domain},
            .sin_port{htons(port)}
        };
        int opt{1};
        return (setsockopt(ptr->fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))
                | (inet_pton(ptr->domain, h.data(), &addr.sin_addr) <= 0)
                | ::bind(ptr->fd, reinterpret_cast<sockaddr*>(&addr), sizeof(addr)));
    }
    template <class gsocketClass> constexpr int listen(gsocketClass *ptr, int __maxconns = 3){
        return ::listen(ptr->fd,__maxconns);
    }
    template <class gsocketClass> constexpr Socket acceptConnection(gsocketClass *ptr, Address *buff = nullptr){
        sockaddr_in addr;
        socklen_t addrlen = sizeof(addr);
        int fd = ::accept(ptr->fd, reinterpret_cast<sockaddr*>(&addr),&addrlen);
        if(buff == nullptr){
            return Socket(fd);
        }
        buff->host = inet_ntoa(addr.sin_addr);
        buff->port = htons(addr.sin_port);
        return Socket(fd);
    }
    template <class gsocketClass> constexpr std::optional<Address> getsockname(gsocketClass *ptr, Address *buff = nullptr){
        sockaddr_in addr;
        socklen_t addrlen = sizeof(addr);
        int s = ::getsockname(ptr->fd,reinterpret_cast<sockaddr*>(&addr),&addrlen);
        if(buff == nullptr){
            return std::optional<Address>({inet_ntoa(addr.sin_addr),htons(addr.sin_port)});
        }
        buff->host = inet_ntoa(addr.sin_addr);
        buff->port = htons(addr.sin_port);
        return {};
    }
}
#endif