#ifndef SOCKET_WRAPPER_CPP
#define SOCKET_WRAPPER_CPP
#include <gsocket/socket_wrapper.hh>
constexpr int __TIMEOUT_MULTIPLIER = 1000;
constexpr int opt = 1;
namespace gsocket{
    /* __sw C'tors */
    __sw::__sw(Domain d, Type t, Behaviour b):domain(static_cast<int>(d)), type(b == BLOCK ? static_cast<int>(t) : static_cast<int>(t) | SOCK_NONBLOCK),fd(socket(domain,type,0)){}
    __sw::__sw(ui8 d, ui8 t, ui8 p):domain(d),type(t),fd(socket(d,t,p)){}
    __sw::__sw(ui8 fd):fd(fd){}
    __sw::~__sw(){::close(fd);}
    /* CLOSE */
    int __sw::close(){
        return ::close(fd);
    }
    /* CONNECT FUNCTIONS */

    /* SEND FUNCTIONS */
    int __sw::send(str_view d){
        return ::send(fd, d.data(), d.size(), 0);
    }
    int __sw::send(str_view d, int b){
        return ::send(fd, d.data(), b, 0);
    };
    int __sw::sendto(str_view host, ui16 port, str_view msg){
        if(domain == AF_INET){
            sockaddr_in addr{
                .sin_family = domain,
                .sin_port = htons(port),
            };
            if(inet_pton(domain, msg.data(), &addr.sin_addr)){
                return -2;
            }
            return ::sendto(fd, msg.data(), msg.size(), 0, reinterpret_cast<sockaddr*>(&addr), sizeof(addr));
        }else if(domain == AF_INET6){
            sockaddr_in6 addr{
                .sin6_family{AF_INET6},
                .sin6_port{htons(port)}
            };
            if(inet_pton(domain, msg.data(), &addr.sin6_addr)){
                return -2;
            }
            return ::sendto(fd,msg.data(),msg.size(), 0, reinterpret_cast<sockaddr*>(&addr), sizeof(addr));
        }
    }
    /* RECV FUNCTIONS */
    std::optional<std::string> __sw::recv(){
        std::string buffer(__IO_BUFFSIZE,'\x00');
        int n = ::recv(fd, buffer.data(), __IO_BUFFSIZE, 0);
        if(n == -1 || n == 0){
            return{};
        }
        if(n == __IO_BUFFSIZE){
            int avbytes;
            ioctl(fd, FIONREAD, &avbytes);
            buffer.resize(__IO_BUFFSIZE+avbytes);
            ::recv(fd, &buffer[__IO_BUFFSIZE], avbytes, 0);
        }
        return buffer;
    }
    std::optional<std::string> __sw::recv(int bytes){
        std::string buffer(bytes,'\x00');
        if(::recv(fd, buffer.data(), bytes, 0) == -1){
            return {};
        };
        return buffer;
    }
    int __sw::recvfrom(msgFrom &data){
        if(domain == AF_INET){
            sockaddr_in addr;
            socklen_t addrlen = sizeof(addr);
            int &&n = ::recvfrom(fd,data.msg.data(), data.msg.size(), 0, reinterpret_cast<sockaddr*>(&addr),&addrlen);
            data.addr = {inet_ntoa(addr.sin_addr),htons(addr.sin_port)};
            return n;
        }else if(domain == AF_INET6){
            sockaddr_in6 addr;
            socklen_t addrlen = sizeof(addr);
            int &&n = ::recvfrom(fd, data.msg.data(), data.msg.size(), 0, reinterpret_cast<sockaddr*>(&addr), &addrlen);
            std::string ad(46,'\x00');
            inet_ntop(AF_INET6, &addr.sin6_addr, &ad[0], INET6_ADDRSTRLEN);
            data.addr.host = ad;
            data.addr.port = htons(addr.sin6_port);
            return n;
        }
    }
    /* AWAIT FUNCTIONS */
    template <typename T> int __sw::awaitData(T &buff, int timeout){
        auto fdpol = pollfd{
            .fd{fd},
            .events{POLLIN}
        };
        int r = poll(&fdpol,1,(timeout > 0 ? timeout * __TIMEOUT_MULTIPLIER : -1));
        if(r > 0 && (fdpol.revents & POLLIN)){
            int b;
            ioctl(fd, FIONREAD, &b);
            if(buff.size() < b){
                buff.resize(buff.size()+b);
            }
            return ::recv(fd, buff.data(), buff.size(), 0);
        }
        return -2;
    }
    int __sw::awaitDataFrom(msgFrom &__data, int timeout = -1){
        auto _s_poll = pollfd{
                .fd = fd,
                .events = POLLIN
            };
            int event, avBytes, rStatus;
            event = poll(&_s_poll, 1, (timeout == -1 ? -1 : (timeout * __TIMEOUT_MULTIPLIER)));
            if(event > 0 && (_s_poll.revents & POLLIN)){
                // data available
                ioctl(fd, FIONREAD, &avBytes);
                if(__data.msg.size() < avBytes){
                    __data.msg.resize(avBytes);
                }
                sockaddr addr;
                socklen_t &&addrlen = sizeof(addr);
                int &&n = ::recvfrom(fd, __data.msg.data(), avBytes, 0, &addr, &addrlen);
                if(n != -1){
                    __data.addr.host = inet_ntoa(reinterpret_cast<sockaddr_in*>(&addr)->sin_addr);
                    __data.addr.port = htons(reinterpret_cast<sockaddr_in*>(&addr)->sin_port);
                }
                return n;
            }
            return -2;
    }
    /* BIND FUNCTIONS */
    int __sw::bind(str_view addr, ui16 p){
        if(domain == AF_INET){
            sockaddr_in ad{
                .sin_family = domain,
                .sin_port = htons(p)
            };
            return (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))
                    | !inet_pton(domain, addr.data(), &ad.sin_addr))
                    | ::bind(fd, reinterpret_cast<sockaddr*>(&ad), sizeof(ad));
        }else if(domain == AF_INET6){
            sockaddr_in6 ad{
                .sin6_family{AF_INET6},
                .sin6_port{htons(p)},
                .sin6_scope_id{gsocket::utils::getIdByIp(addr)}
            };
            return (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))
                    | !inet_pton(domain, addr.data(), &ad.sin6_addr))
                    | ::bind(fd, reinterpret_cast<sockaddr*>(&ad), sizeof(ad));
        }
    }
    int __sw::bind(ui16 p){
        if(domain == AF_INET){
            sockaddr_in addr{
                .sin_family{AF_INET},
                .sin_port{htons(p)},
                .sin_addr{INADDR_ANY}
            };
            return (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))
                    | ::bind(fd, reinterpret_cast<sockaddr*>(&addr), sizeof(addr)));
        }else if(domain == AF_INET6){
            sockaddr_in6 addr{
                .sin6_family{AF_INET6},
                .sin6_port{htons(p)},
                .sin6_addr{INADDR_ANY}
            };
            return (setsockopt(fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))
                    | ::bind(fd, reinterpret_cast<sockaddr*>(&addr), sizeof(addr)));
        }
    }
    /* LISTEN FUNCTIONS */
    int __sw::listen(int __mConns = 3){
        return ::listen(fd, __mConns);
    }
    /* ACCEPT FUNCTIONS */
    int __sw::accept(){
        sockaddr addr;
        socklen_t addrlen = sizeof(addr);
        return ::accept(fd, &addr, &addrlen);
    }
    template <typename AddrStruct> int __sw::accept(AddrStruct& a){
        sockaddr addr;
        socklen_t addrlen = sizeof(addr);
        ui8 n = ::accept(fd, &addr, &addrlen);
        if (addr.sa_family == AF_INET){
            a.host = inet_ntoa(reinterpret_cast<sockaddr_in*>(&addr)->sin_addr);
            a.port = htons(reinterpret_cast<sockaddr_in*>(&addr)->sin_port);
        }
        else if(addr.sa_family == AF_INET6){
            inet_ntop(AF_INET6,&reinterpret_cast<sockaddr_in6*>(&addr)->sin6_addr,a.host.data(),INET6_ADDRSTRLEN);
            a.port = htons(reinterpret_cast<sockaddr_in6*>(&addr)->sin6_port);
        }
        return n;
    }
    /* RETRIEVE SOCKET DATA */
    Address __sw::getpeername(){
        if(domain == AF_INET){
            sockaddr_in addr;
            socklen_t addrlen = sizeof(addr);
            ::getpeername(fd, reinterpret_cast<sockaddr*>(&addr), &addrlen);
            return {inet_ntoa(addr.sin_addr), htons(addr.sin_port)};
        }else if(domain == AF_INET6){
            std::string ip(INET6_ADDRSTRLEN,'\x00');
            sockaddr_in6 addr;
            socklen_t addrlen = sizeof(addr);
            ::getpeername(fd,reinterpret_cast<sockaddr*>(&addr),&addrlen);
            inet_ntop(AF_INET6,&addr.sin6_addr,ip.data(),INET6_ADDRSTRLEN);
            return {ip,htons(addr.sin6_port)};
        }
    }
    Address __sw::getsockname(){
        if(domain == AF_INET){
            sockaddr_in addr;
            socklen_t addrlen = sizeof(addr);
            ::getsockname(fd, reinterpret_cast<sockaddr*>(&addr), &addrlen);
            return {inet_ntoa(addr.sin_addr), htons(addr.sin_port)};
        }else if(domain == AF_INET6){
            std::string ip(INET6_ADDRSTRLEN,'\x00');
            sockaddr_in6 addr;
            socklen_t adlen = sizeof(addr);
            ::getsockname(fd,reinterpret_cast<sockaddr*>(&addr), &adlen);
            inet_ntop(AF_INET6,&addr.sin6_addr,ip.data(),INET6_ADDRSTRLEN);
            return {ip,htons(addr.sin6_port)};
        }
    }
}
#endif